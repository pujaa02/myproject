<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Document</title>
  <link rel="stylesheet" href="./css/issueBooks.css">
</head>

<body onload="selectTable()">
  <%-include ('adminSidebar',{search : 6}) %>
  <div class="table1">
    <select name="status" id="status" onchange="selectTable()">
      <option value="pending" selected="selected">pending</option>
      <option value="return">return</option>
    </select>

    <div id="table1">
      <h2 class="text-center" id="headings">ISSUE BOOKS</h2>
      <table class="table text-center table-bordered w-auto">
        <thead>
          <tr>
            <th scope="col">SR NO:</th>
            <th scope="col">USER ID</th>
            <th scope="col">NAME</th>
            <th scope="col">TOTAL BOOKS</th>
            <th scope="col">SHOW</th>
          </tr>
        </thead>
        <tbody id="tbody">

        </tbody>
      </table>
    </div>
    <div class="Container">
      <table id="table">

      </table>
      <div class="footerMain">
        <div class="PageStart foot btn" id="PageStart" onclick="onfirst()">
          << </div>
            <div class="PageLeft foot btn" id="PageLeft" onclick="changePage(-1)">
              < </div>
                <div class="PageNumber foot pageCount" id="pageCount">
                  1
                </div>
                <div class="PageRight foot btn" id="PageRight" onclick="changePage(1)">
                  >
                </div>
                <div class="PageEnd foot btn" id="PageEnd" onclick="onlast()"> >> </div>
            </div>
        </div>
      </div>
     

      
      <script>
        let limit = 2;
        let dataLength;
        let requirePages;
        let totalPages;
        function checkPages(dataLength) {
          let a;
          if (dataLength % 2 == 0) {
            a = dataLength / 2;
            return a;
          }
          else {
            a = (dataLength / 2) + 1;
            return Math.floor(a);
          }
        }
        function lastPageValues(dataLength) {
          let b;
          if (dataLength % 2 == 0) {
            b = 2;
            return b;
          }
          else {
            a = (dataLength / 2) + 1;
            b = dataLength % 2;
            return b;
          }
        }

        function changePage(val) {

          currentPage = Number(document.getElementById("pageCount").innerHTML);

          currentPage = currentPage + val;

          if (currentPage > requirePages || currentPage < 1) {
            return 0;
          }

          document.getElementById("pageCount").innerHTML = currentPage;
          perPageData();

        }

        function onfirst() {

          currentPage = Number(document.getElementById("pageCount").innerHTML);

          if (currentPage <= 1) {
            return 0;
          }

          document.getElementById("pageCount").innerHTML = 1;
          perPageData();
        }
        function onlast() {
          currentPage = Number(document.getElementById("pageCount").innerHTML);
          if (currentPage >= requirePages) {
            return 0;
          }
          document.getElementById("pageCount").innerHTML = requirePages;
          perPageData();
        }


        const showAllBookList = async (status) => {
          let data = await fetch(`${location.origin}/admin/listsOfFilterUser/?status=${status}&&searchby=<%=searchby%>&&searchvalue=<%=searchvalue%>`, {
            method: "GET",
            headers: {
              "Content-Type": "application/x-www-form-urlencoded",
            },
          });
          let result = await data.json();

          dataLength = result.length;
          requirePages = checkPages(dataLength);


          return result;
        }

        const perPageData = async (status) => {
          let filter = document.getElementById("status").value;
          document.getElementById("tbody").innerHTML = "";
          let result = await showAllBookList(filter);

          totalPages = 2;
          let offset;
          let page = document.getElementById("pageCount").innerHTML;
          offset = ((page - 1) * 2) + 2;
          if (page == requirePages) {
            totalPages = lastPageValues(result.length);
            if (totalPages % 2 != 0) {
              offset = ((page - 1) * 2) + 2 - totalPages;
            }
          }
          let startPage = (page - 1) * 2;
          for (let i = startPage; i < offset; i++) {
            let txt =
              `
          <tr>
           <th scope="row">
                  ${i + 1} 
                </th>
          <td>${result[i].reader_id}</td>  
          <td>${result[i].u_fname}</td>  
          <td>${result[i].Total_Books}</td>
          <td><a href="/admin/showBooksById/?status=${filter}&reader_id=${result[i].reader_id}"><input type="button"
                      value="Show" class="btn btn-primary"></a>
                </td>
          </tr>
          `;
            document.getElementById("tbody").innerHTML += txt;
          }
        }

        const selectTable = () => {
          let status = document.getElementById("status").value;
          if (status == "pending") {
            document.getElementById("headings").innerHTML = "PENDING BOOKS";
          } else {
            document.getElementById("headings").innerHTML = "RETURN BOOKS ";
          }
          document.getElementById("pageCount").innerHTML=1;
          perPageData(status);
        }
      </script>
</body>

</html>