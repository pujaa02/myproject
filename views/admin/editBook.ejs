<link rel="stylesheet" href="/sweetalert2/sweetalert2.min.css">
  <script src="/sweetalert2/sweetalert2.min.js"></script>
<style>

.error_message {
      color: red;

    }

</style>


<%-include ('adminSidebar',{search : 0}) %>
  <div class="table1 overflow-auto">
    <h2 class="text-center mt-2">Edit Book</h2>
    <div id="success"></div>
    <form class="" enctype="multipart/form-data" id="my-form">
      <input type="text" name="bookid" value="<%= result[0].prime_book_id %>" hidden>
      <div class="form-row">
        <div class="form-group col-md">
          
            <label for="myInput" style="margin-bottom: 5px;" >Select Genre</label>
          <input type="text" placeholder="search.." id="myInput" onkeyup="filteroptions('optionfield',this.id,)" class="d-block" value="">
          <ul id="genreid" name="genreid"  class="form-control" style="width: 15%;max-height: 150px;overflow: scroll;" >
          </ul>
        <input type="hidden" name="genreid" id="setgenreid" value="<%=result[0].genre_id%>">
        
        <div class="form-group col-md">
          <label for="inputPassword4">Title</label>
          <input type="text" class="form-control" name="title" id="title" placeholder="Title"
            value="<%=result[0].book_title %>">
          <span id="title_error" class="error_message"></span>
        </div>
        <div class="form-group col-md">
          <label for="authorname">select author</label>
          <input type="text" placeholder="search.." id="myInputAuthor" onkeyup="filteroptions('optionfieldauthor',this.id)" class="d-block" value="">
         <ul id="authorid" class="form-control" style="width: 15%;max-height: 150px;overflow: scroll;">
        
         </ul>
         <input type="hidden" name="author_id" id="setauthorid" value="<%=result[0].author_id%>">
        </div>
      </div>
      <div class="form-row">
        <div class="form-group col-md">
          <label for="inputEmail4">Publication Name</label>
          <input type="text" name="publication" class="form-control" id="publication" placeholder="Publication"
            value="<%=result[0].book_publication %>">
          <span id="publication_error" class="error_message"></span>
        </div>

        <div class="form-group col-md">
          <label for="inputPassword4">Published Year</label>
          <input type="text" class="form-control" id="publicationyear" name="publicationyear" placeholder="Year"
            value="<%=result[0].book_publication_year %>">
          <span id="publicationyear_error" class="error_message"></span>
        </div>
      </div>
      <div class="form-group">
        <label for="inputAddress">ISBN</label>
        <input type="text" class="form-control" name="isbn" id="isbn" placeholder="ISBN"
          value="<%=result[0].book_ISBN %>">
        <span id="isbn_error" class="error_message"></span>
      </div>
      <div class="form-group">
        <label for="inputAddress">select Language</label>
        <select name="language" id="languageid" class="form-select w-25"></select>
      </div>
      <div class="form-group">
        <label for="inputAddress2">Description</label>
        <input type="text" class="form-control" name="desc" id="desc" placeholder="Description"
          value="<%=result[0].book_desc %>">
        <span id="desc_error" class="error_message"></span>
      </div>

      <div id="output">
        <label for="image">Image</label>
        <br>
        <img src="" alt="" id="ImagePreview" style="max-width: 100px;max-height: 100px;">
      </div>
      <div class="form-group col-md">
        <input type="file" name="image" class="form-control" id="image" accept="image/*" value=""
          onchange="previewImage(event)">
        <span id="image_error" class="error_message"></span>
      </div>
      <input type="button" class="btn btn-primary mt-3 mb-5" value="update" onclick="validateForm()">
    </form>
  </div>
  </div>
  </div>
  </body>


  <script>
          
const parsedUrl = new URL(window.location.href);
const ImagePreview=document.getElementById("ImagePreview");

ImagePreview.src="<%=result[0].book_img%>"
let select=document.getElementById("genreid");
let select1=document.getElementById("authorid");
let select3 = document.getElementById("languageid");
select.style.display="none"
 select1.style.display="none"
    genreselect();
    getAuthors();
    getlangueages()
    function onclickLi(livalue,id){
        document.getElementById('myInput').value=livalue
        document.getElementById('setgenreid').value=id
      }
      function onclickLiauthor(livalue,id){
        document.getElementById('myInputAuthor').value=livalue
        document.getElementById('setauthorid').value=id
      }
async function genreselect(){
  let genrearray=[]
  let data=await fetch("/admin/getGenres",{
    method:"Get",
    headers:{"Content-Type":"application/json",
},
  })
  
  let datahh=await data.json();

  let datafinal=datahh.data;
  let obj={};

  let temp=""
      for(let i=0;i<datafinal.length;i++){
        obj[datafinal[i].genre_id]=datafinal[i].genre_name;
        temp+=`<li class="optionfield" onclick="onclickLi('${datafinal[i].genre_name}','${datafinal[i].genre_id}')">${datafinal[i].genre_name}</li>`
        let option=document.createElement("li");
      
      }
      let select=document.getElementById("genreid");
    
      select.innerHTML=temp
      (obj);
 let genreId='<%=result[0].genre_id%>';
let myInput=document.getElementById("myInput");
myInput.value=obj[genreId];
  
}


function previewImage(event){
  const input=event.target;

      if (input.files && input.files[0]) {
        const reader = new FileReader();
        reader.onload = function (e) {
          ImagePreview.src = e.target.result;
        }
        reader.readAsDataURL(input.files[0]);
      }

    }


async function getAuthors(){
  let authorarray=[]
  let data=await fetch("/admin/getAllAuthors",{
    method:"Get",
    headers:{"Content-Type":"application/json",
},
  })
  let dataauthor=await data.json();
  let authors=dataauthor.authors;

  let author_id='<%=result[0].author_id%>'

 let idarr=author_id.split(",")
 let tempa=""
let objauthor={}
let myInputAuthor=document.getElementById("myInputAuthor");
      for(let i=0;i<authors.length;i++){
        authorarray.push(authors[i].author_name)
        objauthor[authors[i].author_id]=authors[i].author_name;
        let option=document.createElement("li");
        tempa+=`<li class="optionfieldauthor" onclick="onclickLiauthor('${authors[i].author_name}','${authors[i].author_id}')">${authors[i].author_name}</li>`
  
      }
      let select=document.getElementById("authorid");
 
      select1.innerHTML=tempa;
  
    myInputAuthor.value=objauthor[author_id];
   return authorarray


}
async function getlangueages() {
  let languageselected='<%=result[0].books_lang%>'
        let data = await fetch("/admin/getLanguages", {
          method: "Get",
          headers: {
            "Content-Type": "application/json",
          },
        })

        let datahh = await data.json();
        let datafinal = datahh.languages;
        for (let i = 0; i < datafinal.length; i++) {
          let option = document.createElement("option")
          if(datafinal[i].language===languageselected){
          
              option.selected=true;
          }
          option.text = datafinal[i].language;
          option.value = datafinal[i].language;
          select3.appendChild(option)

        }
  
}
function filteroptions(classname,id){
    
     if(id==="myInput"){
      select.style.display="block"
      select1.style.display="none"
    }
    else if(id==='myInputAuthor'){
      select.style.display="none"
      select1.style.display="block"
    }
      
    let input=document.getElementById(id);
    let nameOfClass="."+classname;
    const filter=input.value.toLowerCase();
  
    const options=document.querySelectorAll(nameOfClass);
    options.forEach((option)=>{
      const text=option.textContent.toLowerCase();
  
      option.style.display=text.includes(filter)?"block":"none"
    })
   }          
  
function validateForm(){


  let genrename= document.getElementById("myInput");
  let authorname=document.getElementById("myInputAuthor");
 let title=document.getElementById("title")
  let publication=document.getElementById("publication")
   let publicationyear=document.getElementById("publicationyear")
  let desc=document.getElementById("desc")
  let isbn=document.getElementById("isbn")
  let title_error=document.getElementById("title_error")
      let image = document.getElementById("image")
      let fields = [title, publication, publicationyear, desc, isbn];

let errorMessagesarr=document.getElementsByClassName("error_message");

for(let i=0;i<errorMessagesarr.length;i++){
  errorMessagesarr[i].textContent=''
}
      let errorMessages = ["title is required", "publication is required", "publication year is required", "book description is required", "isbn is required"]
      let isValid = true;
      for (let i = 0; i < fields.length; i++) {
        let errorElement = document.getElementById(fields[i].id + "_error");
        (errorElement);
        (fields[i]);
        if (!fields[i].value.trim()) {
          (fields[i]);
          fields[i].classList.add("error");
          errorElement.textContent = errorMessages[i];
          isValid = false;
        }
        else {
          errorElement.textContent = ""
          fields[i].classList.remove("error");
        }
      }
      if( title.value.trim()!=="" && title.value.trim().length<5 || title.value.trim().length>30){
    title_error.textContent="title must be between 5 and 30 character"
        isValid=false; 
   }

   if(isNaN(isbn.value.trim())){
    isbn_error.textContent="isbn must be in digits"
        isValid=false; 
  }
  else if( isbn.value.trim()!=="" && isbn.value.trim().length!=13){
    isbn_error.textContent="isbn must be 13 digits"
        isValid=false; 
   }
   if( publication.value.trim()!=="" && publication.value.trim().length<5 || publication.value.trim().length>20){
    publication_error.textContent="publication must be between 5 and 30 characters"
        isValid=false; 
   }
      let year = publicationyear.value.trim();
      if (isNaN(year)) {
        document.getElementById("publicationyear_error").textContent = "Enter valid year";
        isValid = false;
      }
      else if (publicationyear.value.trim() != "" && (Number(publicationyear.value.trim()) < 1800 || Number(publicationyear.value.trim()) > new Date().getFullYear())) {
        publicationyear.classList.add("error");
        document.getElementById("publicationyear_error").textContent = "publication year must be between 1800 and current year"
        isValid = false;
      }
      if (desc.value.trim() != "" && (desc.value.trim().length < 50 || desc.value.trim().length > 250)) {
        document.getElementById("desc_error").textContent = "description must be between 50 and 250 characters"
        isValid = false;
      }

      if(image.value!=""){
 let types=image.files[0].type;
 let typearr=types.split("/");
 let imgtype=typearr[1];

 const filTypes=/jpeg|jpg|png|gif/;
 if(!filTypes.test(imgtype)){
  document.getElementById("image_error").textContent="invalid file type"
 isValid=false;
 }
 else if((image.files[0] && image.files[0].size>20000)){
  image.classList.add("error");
  document.getElementById("image_error").textContent="Book cover size must be less than 20KB "
 isValid=false;
}
}
      if (isValid === true) {

        updateBook();

      }
      return isValid;
    }

async function updateBook(){
  const form=document.getElementById("my-form")
const formData =new FormData(form);
const params=new URLSearchParams(formData)
params.append('file',image.files[0])
const response=  await fetch('/admin/editBook', {
               method: 'POST',
               'Content-Type':"application/json",
               body: formData,
           });
let data=await response.json();
 

if(data.message==="success"){
  Swal.fire({
      title: "update Book!",
      text: "book has been updated succesfully",
      icon: "success"
    }).then((result)=>{
      if(result.isConfirmed){
        
       window.location.href = `/admin/editBook/?bookid=${parsedUrl.searchParams.get('bookid')}`
      }
    });
}
if(data.message==="error"){
          Swal.fire({
      title: "error!",
      text: "error while updating book.",
      icon: "error"
    }).then((result)=>{
      if(result.isConfirmed){
        for(let i=0;i<data.errors.length;i++){
          let errorele=data.errors[i].path+"_error";
        
          document.getElementById(errorele).textContent=data.errors[i].msg;
         }
      }
    });

        }

    }
  </script>

  </html>